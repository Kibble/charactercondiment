{"version":3,"sources":["Game.js","Board.js","App.js","reportWebVitals.js","index.js"],"names":["TicTacToe","setup","cells","Array","fill","turn","moveLimit","moves","clickCell","G","ctx","id","INVALID_MOVE","currentPlayer","endIf","map","row","symbols","i","every","some","winner","filter","c","length","IsDraw","draw","ai","enumerate","push","move","args","TicTacToeBoard","this","props","gameover","undefined","cellStyle","border","width","height","lineHeight","textAlign","tbody","j","style","onClick","React","Component","App","Client","game","board","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAEaA,EAAY,CACvBC,MAAO,iBAAO,CAAEC,MAAOC,MAAM,GAAGC,KAAK,QAErCC,KAAM,CACJC,UAAW,GAGbC,MAAO,CACLC,UAAW,SAACC,EAAGC,EAAKC,GAClB,GAAoB,OAAhBF,EAAEP,MAAMS,GACV,OAAOC,IAETH,EAAEP,MAAMS,GAAMD,EAAIG,gBAItBC,MAAO,SAACL,EAAGC,GACT,OAsBeR,EAtBDO,EAAEP,MAuBA,CAChB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAQQa,KALK,SAAAC,GACpB,IAAMC,EAAUD,EAAID,KAAI,SAAAG,GAAC,OAAIhB,EAAMgB,MACnC,OAAOD,EAAQE,OAAM,SAAAD,GAAC,OAAU,OAANA,GAAcA,IAAMD,EAAQ,SAGpBG,MAAK,SAAAF,GAAC,OAAU,IAANA,KAtCnC,CAAEG,OAAQX,EAAIG,eA0C3B,SAAgBX,GACd,OAAgD,IAAzCA,EAAMoB,QAAO,SAAAC,GAAC,OAAU,OAANA,KAAYC,OAzC/BC,CAAOhB,EAAEP,OACJ,CAAEwB,MAAM,QADjB,EAmBJ,IAAmBxB,GAdjByB,GAAI,CACFC,UAAW,SAACnB,EAAGC,GAEb,IADA,IAAIH,EAAQ,GACHW,EAAI,EAAGA,EAAI,EAAGA,IACF,OAAfT,EAAEP,MAAMgB,IACVX,EAAMsB,KAAK,CAAEC,KAAM,YAAaC,KAAM,CAACb,KAG3C,OAAOX,K,gCCjCAyB,EAAb,sKACUrB,GACNsB,KAAKC,MAAM3B,MAAMC,UAAUG,KAF/B,+BAKY,IAAD,OACHU,EAAS,GACTY,KAAKC,MAAMxB,IAAIyB,WACjBd,OACqCe,IAAnCH,KAAKC,MAAMxB,IAAIyB,SAASd,OACtB,sBAAKV,GAAG,SAAR,qBAA0BsB,KAAKC,MAAMxB,IAAIyB,SAASd,UAElD,qBAAKV,GAAG,SAAR,oBAaN,IATA,IAAM0B,EAAY,CAChBC,OAAQ,iBACRC,MAAO,OACPC,OAAQ,OACRC,WAAY,OACZC,UAAW,UAGTC,EAAQ,GACHzB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IADA,IAAIhB,EAAQ,GADc,WAEjB0C,GACP,IAAMjC,EAAK,EAAIO,EAAI0B,EACnB1C,EAAM2B,KACJ,oBAAIgB,MAAOR,EAAoBS,QAAS,kBAAM,EAAKA,QAAQnC,IAA3D,SACG,EAAKuB,MAAMzB,EAAEP,MAAMS,IADKA,KAHtBiC,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAQTD,EAAMd,KAAK,6BAAa3B,GAAJgB,IAGtB,OACE,gCACE,uBAAOP,GAAG,QAAV,SACE,gCAAQgC,MAETtB,SA3CT,GAAoC0B,IAAMC,WCO3BC,EALHC,YAAO,CACjBC,KAAMnD,EACNoD,MAAOpB,ICMMqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f8b7fab0.chunk.js","sourcesContent":["import { INVALID_MOVE } from 'boardgame.io/core';\n\nexport const TicTacToe = {\n  setup: () => ({ cells: Array(9).fill(null) }),\n\n  turn: {\n    moveLimit: 1,\n  },\n\n  moves: {\n    clickCell: (G, ctx, id) => {\n      if (G.cells[id] !== null) {\n        return INVALID_MOVE;\n      }\n      G.cells[id] = ctx.currentPlayer;\n    },\n  },\n\n  endIf: (G, ctx) => {\n    if (IsVictory(G.cells)) {\n      return { winner: ctx.currentPlayer };\n    }\n    if (IsDraw(G.cells)) {\n      return { draw: true };\n    }\n  },\n\n  ai: {\n    enumerate: (G, ctx) => {\n      let moves = [];\n      for (let i = 0; i < 9; i++) {\n        if (G.cells[i] === null) {\n          moves.push({ move: 'clickCell', args: [i] });\n        }\n      }\n      return moves;\n    },\n  },\n};\n\n// Return true if `cells` is in a winning configuration.\nfunction IsVictory(cells) {\n  const positions = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  const isRowComplete = row => {\n    const symbols = row.map(i => cells[i]);\n    return symbols.every(i => i !== null && i === symbols[0]);\n  };\n\n  return positions.map(isRowComplete).some(i => i === true);\n}\n\n// Return true if all `cells` are occupied.\nfunction IsDraw(cells) {\n  return cells.filter(c => c === null).length === 0;\n}\n\n","import React from 'react';\n\nexport class TicTacToeBoard extends React.Component {\n  onClick(id) {\n    this.props.moves.clickCell(id);\n  }\n\n  render() {\n    let winner = '';\n    if (this.props.ctx.gameover) {\n      winner =\n        this.props.ctx.gameover.winner !== undefined ? (\n          <div id=\"winner\">Winner: {this.props.ctx.gameover.winner}</div>\n        ) : (\n          <div id=\"winner\">Draw!</div>\n        );\n    }\n\n    const cellStyle = {\n      border: '1px solid #555',\n      width: '50px',\n      height: '50px',\n      lineHeight: '50px',\n      textAlign: 'center',\n    };\n\n    let tbody = [];\n    for (let i = 0; i < 3; i++) {\n      let cells = [];\n      for (let j = 0; j < 3; j++) {\n        const id = 3 * i + j;\n        cells.push(\n          <td style={cellStyle} key={id} onClick={() => this.onClick(id)}>\n            {this.props.G.cells[id]}\n          </td>\n        );\n      }\n      tbody.push(<tr key={i}>{cells}</tr>);\n    }\n\n    return (\n      <div>\n        <table id=\"board\">\n          <tbody>{tbody}</tbody>\n        </table>\n        {winner}\n      </div>\n    );\n  }\n}\n","import { Client } from 'boardgame.io/react';\nimport { TicTacToe } from './Game';\nimport { TicTacToeBoard } from './Board';\n\nconst App = Client({\n  game: TicTacToe,\n  board: TicTacToeBoard,\n});\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}